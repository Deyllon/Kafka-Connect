SET 'auto.offset.reset' = 'earliest';
--DEFINE oracle_db_name = 'ORAHOM';

CREATE STREAM IF NOT EXISTS STR_USER_POSTGRESQL (
    after STRUCT <
        ID VARCHAR,
        USER_NAME VARCHAR,
        E_MAIL VARCHAR,
        USER_PASSWORD VARCHAR,
        CPF VARCHAR,
        USER_ESPA VARCHAR
    >,
    op VARCHAR
) WITH (KAFKA_TOPIC='postgresql.public.USER_', VALUE_FORMAT='AVRO');

CREATE STREAM IF NOT EXISTS USER_POSTGRESQL AS SELECT 
    after -> ID AS ID,
    after -> USER_NAME AS USER_NAME,
    after -> E_MAIL AS E_MAIL,
    after -> USER_PASSWORD AS USER_PASSWORD,
    after -> CPF AS CPF,
    after -> USER_ESPA AS USER_ESPA
FROM STR_USER_POSTGRESQL WHERE op = 'c' AND  after -> USER_ESPA <> '6000';

CREATE STREAM IF NOT EXISTS STR_USER_ADDRESS_POSTGRESQL (
    after STRUCT <
        ID VARCHAR,
        CEP VARCHAR,
        COUNTRY VARCHAR,
        REGION VARCHAR,
        CITY VARCHAR,
        DISTRICT VARCHAR,
        STREET VARCHAR,
        STREET_NUMBER VARCHAR,
        USER_ADDRESS_ESPA VARCHAR,
        USER_ID VARCHAR
    >,
    op VARCHAR
) WITH (KAFKA_TOPIC='postgresql.public.USER_ADDRESS', VALUE_FORMAT='AVRO');

CREATE STREAM IF NOT EXISTS USER_ADDRESS_POSTGRESQL AS SELECT 
    after -> ID AS ID,
    after -> CEP AS CEP,
    after -> COUNTRY AS COUNTRY,
    after -> REGION AS REGION,
    after -> CITY AS CITY,
    after -> DISTRICT AS DISTRICT,
    after -> STREET AS STREET,
    after -> STREET_NUMBER AS STREET_NUMBER,
    after -> USER_ADDRESS_ESPA AS USER_ADDRESS_ESPA,
    after -> USER_ID AS USER_ID
FROM STR_USER_ADDRESS_POSTGRESQL WHERE op = 'c'  AND  after -> USER_ADDRESS_ESPA <> '6000';

CREATE STREAM IF NOT EXISTS STR_USER_PURCHASE_POSTGRESQL (
    after STRUCT <
        ID VARCHAR,
        VALUE_PURCHASE VARCHAR,
        USER_PURCHASE_ESPA VARCHAR,
        USER_ADDRESS_ID VARCHAR
    >,
    op VARCHAR
) WITH (KAFKA_TOPIC='postgresql.public.USER_PURCHASE', VALUE_FORMAT='AVRO');

CREATE STREAM IF NOT EXISTS USER_PURCHASE_POSTGRESQL AS SELECT 
    after -> ID AS ID,
    after -> VALUE_PURCHASE AS VALUE_PURCHASE,
    after -> USER_PURCHASE_ESPA AS USER_PURCHASE_ESPA,
    after -> USER_ADDRESS_ID AS USER_ADDRESS_ID
FROM STR_USER_PURCHASE_POSTGRESQL WHERE op = 'c' AND  after -> USER_PURCHASE_ESPA <> '6000';


CREATE STREAM IF NOT EXISTS SINK_USER_INSERT AS SELECT
    UP.USER_NAME AS USER_NAME,
    UP.E_MAIL AS E_MAIL,
    UP.USER_PASSWORD AS USER_PASSWORD,
    UP.CPF AS CPF,
    CAST(CAST(UAP.CEP AS DOUBLE) AS INT) AS CEP,
    UAP.COUNTRY AS COUNTRY,
    UAP.REGION AS REGION,
    UAP.CITY AS CITY,
    UAP.DISTRICT AS DISTRICT,
    UAP.STREET AS STREET,
    CAST(CAST(UAP.STREET_NUMBER AS DOUBLE) AS INT) AS STREET_NUMBER,
    5000 AS USER_ESPA,
    UP.ID  AS ID
FROM USER_POSTGRESQL UP 
    INNER JOIN USER_ADDRESS_POSTGRESQL UAP WITHIN 7 DAYS ON UP.ID = UAP.USER_ID
    PARTITION BY UP.ID;

CREATE STREAM IF NOT EXISTS SINK_USER_PURCHASE2 AS SELECT
    UPP.ID,
    CAST(CAST(UP.ID AS DOUBLE) AS INT) AS USER_ID,
    CAST(CAST(UPP.VALUE_PURCHASE AS DOUBLE) AS INT) AS VALUE_PURCHASE,
    5000 AS USER_PURCHASE_ESPA
FROM  USER_PURCHASE_POSTGRESQL UPP
    INNER JOIN USER_ADDRESS_POSTGRESQL UAP
        WITHIN 7 DAYS ON UPP.USER_ADDRESS_ID = UAP.ID
    INNER JOIN USER_POSTGRESQL UP
        WITHIN 7 DAYS ON UP.ID = UAP.USER_ID
    PARTITION BY  UPP.ID;